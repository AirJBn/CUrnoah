SENG 1110 – Fall 2025
Chapter 3: Control Statements and
Algorithm Development, Part 1

Dr. Zeinab Teimoori
Department of Engineering

Learning Objectives (1 of 2)
In this chapter you’ll:
• Learn basic problem-solving techniques.
• Develop algorithms through the process of top-down,
stepwise refinement.
• Use the if and if…else selection statements to choose
between alternative actions.
• Use the while iteration statement to execute statements
in a program repeatedly.
• Use counter-controlled iteration and sentinelcontrolled
iteration.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Learning Objectives (2 of 2)
• Use nested control statements.
• Use the compound assignment operator and the
increment and decrement operators.
• Learn about the portability of fundamental data types.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.1 Introduction
• Before writing a program to solve a problem, have a
thorough understanding of the problem and a
carefully planned approach to solving it.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.2 Algorithms
• Any solvable computing problem can be solved by the
execution a series of actions in a specific order.
• An algorithm is a procedure for solving a problem in
terms of
– the actions to execute and
– the order in which these actions execute
• Specifying the order in which statements (actions)
execute in a computer program is called program
control.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.3 Pseudocode (1 of 2)
• Pseudocode (or “fake” code) is an artificial and
informal language that helps you develop algorithms.
• Similar to everyday English
• Convenient and user friendly.
• Helps you “think out” a program before attempting to
write it.
• Carefully prepared pseudocode can easily be
converted to structured portions of C++ programs.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.3 Pseudocode (2 of 2)
• Normally describes only executable statements.
• Declarations are not executable statements.
• The algorithm that inputs two integers from the user,
adds these integers and displays their sum.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.4 Control Structures (1 of 2)
• Normally, statements in a program are executed one
after the other in the order in which they’re written.
– Called sequential execution.
• Various C++ statements enable you to specify that the
next statement to execute may be other than the next
one in sequence.
– Called transfer of control.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.4 Control Structures (2 of 2)
• All programs could be written in terms of only three
control structures
– the sequence structure
– the selection structure and
– the iteration structure

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.4.1 Sequence Structure
• Unless directed otherwise, the computer executes C++
statements one after the other in the order in which
they’re written—that is, in sequence.
• A typical sequence structure in which two calculations
are performed in order.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.4.2 Selection Statements (1 of 2)
• C++ has three types of selection.
– The if selection statement either performs (selects) an
action (or group of actions) if a condition (predicate) is
true or skips the action (or group of actions) if the
condition is false.
– The if…else selection statement performs an action
(or group of actions) if a condition is true or performs a
different action (or group of actions) if the condition is
false.
– The switch selection statement performs one of
many different actions (or groups of actions),
depending on the value of an integer expression.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.4.2 Selection Statements (2 of 2)
• The if selection statement is a single-selection
statement if (condition) {
// Code to be executed if condition is true
}

• The if…else statement is called a double-selection
statement
if (condition) {
// Code to execute if the condition is true
} else {
// Code to execute if the condition is false
}

• The switch selection statement is called a multipleselection statement
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.4.3 Iteration Statements (1 of 2)
• C++ provides three types of iteration statements (also
called looping statements or loops) for performing
statements repeatedly while a condition (called the
loop-continuation condition) remains true—while,
do…while and for.
– The while and for statements perform the
action (or group of actions) in their bodies zero or
more times.
– The do…while statement performs the action (or
group of actions) in its body at least once.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.4.3 Iteration Statements (2 of 2)
• Each of the words if, else, switch, while, do and
for is a C++ keyword.
• These words are reserved by the C++ programming
language to implement various features, such as C++’s
control statements.
• Keywords cannot be used as identifiers, such as
variable names.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

C++ keywords (1 of 2)
Keywords common to the C and C++ programming
languages
asm

auto

break

case

char

const

continue

default

do

double

else

enum

extern

float

for

goto

if

inline

int

long

register

return

short

signed

sizeof

static

struct

switch

typedef

union

unsigned

void

volatile

while

Blank

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

C++ keywords (2 of 2)
C++-only keywords
and

and_eq

bitand

bitor

bool

catch

class

compl

const_cast

delete

dynamic_cast

explicit

export

false

friend

mutable

namespace

new

not

not_eq

operator

or

or_eq

private

protected

public

reinterpret_cast

static_cast

template

this

throw

true

try

typeid

Typename

using

virtual

wchar_t

xor

xor_eq

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

C++ keywords (3 of 3)
C++11 keywords

alignas

alignof

char16_t

char32_t

constexpr

decltype

noexcept

nullptr

static_assert

thread_local

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.5 If Single-Selection Statement
• Programs use selection statements to choose among alternative
courses of action.
• Pseudocode to determine whether “student’s grade is greater
than or equal to 60” is true
If student’s grade is greater than or equal to 60 Print
“Passed”
– If true, “Passed” is printed and the next pseudocode
statement in order is “performed”.
– If false, the print statement is ignored and the next
pseudocode statement in order is performed.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.5 If Selection Statement (1 of 2)
• The preceding pseudocode If statement can be written in C++
as
–

• In C++, a decision can be based on any expression that
evaluates to zero or nonzero
– If the expression evaluates to zero, it’s treated as false; if
the expression evaluates to nonzero, it’s treated as true.
• C++ also provides the data type bool for Boolean variables
that can hold only the values true and false.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.5 If Selection Statement (2 of 2)
• The diamond or decision symbol indicates that a
decision is to be made.
– Each transition arrow emerging from a decision
symbol has a guard condition in square
brackets above or next to the arrow.
– If a guard condition is true, the workflow enters
the action state to which that transition arrow
points.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6 if…else Double-Selection Statement (1 of
3)

• if…else double-selection statement
– specifies an action (or group of actions) to perform
when the condition is true and a different action
to perform when the condition is false.
• Pseudocode that prints “Passed” if the student’s grade
is greater than or equal to 60, or “Failed” otherwise.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6 if…else Double-Selection Statement (2 of
3)

• The preceding If…Else pseudocode can be written in
C++ as

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6.1 Nested if…else Statements (1 of 3)
• Nested if…else statements test for multiple cases
by placing if…else selection statements inside other
if…else selection statements.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6.1 Nested if…else Statements (2 of 3)
• This pseudocode can be written in C++ as

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6.1 Nested if…else Statements (3 of 3)
• Most programmers write the preceding statement as

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Error-Prevention Tip 4.1
In a nested if…else statement, ensure that you test for all
possible cases.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6.2 Dangling-Else Problem
• Throughout the text, we always enclose control
statement bodies in braces ({ and }).
• This avoids a logic error called the “dangling-else”
problem.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6.3 Blocks (1 of 2)
• The if statement normally expects only one
statement in its body.
• To include several statements in an if (or the body of
an else for an if…else statement), enclose the
statements in braces.
• Good practice to always use the braces.
• Statements contained in a pair of braces form a block.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6.3 Blocks (2 of 2)
• It’s possible to have no statement at all—called a null
statement (or an empty statement).
• The null statement is represented by placing a
semicolon (;) where a statement would normally be.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Checkpoint
(True/False) The while, for and do…while statements
perform their action (or group of actions) zero or more
times.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.6.4 Conditional Operator (?:)
• Conditional operator (?:)
– Closely related to the if…else statement.
• C++’s only ternary operator—it takes three operands.
• The operands, together with the conditional operator, form
a conditional expression.
– The first operand is a condition
– The second operand is the value for the entire
conditional expression if the condition is true
– The third operand is the value for the entire conditional
expression if the condition is false.
• The “values” also can be actions to execute.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.7 while Iteration Statement (1 of 2)
• An iteration statement (also called a looping statement or a
loop) allows you to specify that a program should repeat an
action while some condition remains true.
While there are more items on my shopping list
Purchase next item and cross it off my list
– Eventually, the condition will become false, the iteration will
terminate, and the first pseudocode statement after the
iteration statement will execute.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.7 while Iteration Statement (2 of 2)
• Consider a program segment that finds the first
power of 3 larger than 100. When the following while
iteration statement finishes executing, product
contains the result:

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

while Iteration Statement UML Activity
Diagram

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Common Programming Error 4.2
Not providing in the body of a while statement an action
that eventually causes the condition in the while to
become false results in a logic error called an infinite loop
(the loop never terminates).

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.8 Formulating Algorithms: CounterControlled Iteration
• Consider the following problem statement:
– A class of ten students took a quiz. The grades
(integers in the range 0-100) for this quiz are
available to you. Determine the class average on
the quiz.
• The class average is equal to the sum of the grades
divided by the number of students.
• The algorithm for solving this problem on a computer
must input each grade, keep track of the total of all
grades entered, perform the averaging calculation
and print the result.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.8.1 Pseudocode Algorithm with Counter
Controlled Iteration
• We use counter-controlled iteration to input the
grades one at a time.
– This technique uses a variable called a counter (or
control variable) to control the number of times a
group of statements will execute.
– Often called definite iteration because the
number of iterations is known before the loop
begins executing.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Pseudocode Algorithm That Uses CounterControlled Iteration to Solve the Class-Average
Problem

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.8.2 Implementing Counter-Controlled
Iteration (1 of 4)
• Class-average problem using counter-controlled
iteration.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.8.2 Implementing Counter-Controlled
Iteration (2 of 4)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.8.2 Implementing Counter-Controlled
Iteration (3 of 4)
• Variable gradeCounter is of type unsigned int,
because it can assume only the values from 1 through
11 (11 terminates the loop), which are all positive
values.
– In general, counters that should store only
nonnegative values should be declared with
unsigned types.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.8.2 Implementing Counter-Controlled
Iteration (4 of 4)
• You’ll normally initialize counter variables to zero or
one, depending on how they are used in an algorithm.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Checkpoint
(Code) Rewrite the initialization in the following code so
the loop iterates 5 times.
int count{1};
while (count < 5) {
count = count + 1;
cout << "count is :" << count << "\n";
}

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9 Formulating Algorithms: SentinelControlled Iteration
• Let’s generalize the class average problem.
– Develop a class average program that processes grades
for an arbitrary number of students each time it’s run.
• Must process an arbitrary number of grades.
– How can the program determine when to stop the
input?
• Sentinel value (also called a signal value, a dummy value
or a flag value) can be used for “end of data entry.”
• Sentinel-controlled iteration is often called indefinite
iteration
– the number of iterations is not known in advance.
• Sentinel value must
Copyright
© 2017,
2014,acceptable
2012 Pearson Education,
All Rights Reserved
not
be an
inputInc.value.

4.9.1 Top-Down, Stepwise Refinement: the
Top and First Refinement (1 of 2)
• We approach the class average program with a
technique called top-down, stepwise refinement
• Begin with a pseudocode representation of the top—a
single statement that conveys program’s overall
function
– Determine the class average for the quiz for an
arbitrary number of students
• The top is, in effect, a complete representation of a
program.
– Rarely conveys sufficient detail from which to write
a pro-gram.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9.1 Top-Down, Stepwise Refinement: the
Top and First Refinement (2 of 2)
• We divide the top into a series of smaller tasks and list
these in the order in which they need to be
performed.
• This results in the following first refinement.
– Initialize variables
– Input, sum and count the quiz grades
– Calculate and print the class average
• This refinement uses only the sequence structure—
these steps execute in order.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9.2 Proceeding to the Second Refinement
(1 of 3)

• In the second refinement, we commit to specific
variables.
• The pseudocode statement
Input, sum and count the quiz grades
requires an iteration statement (i.e., a loop) that
successively inputs each grade.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9.2 Proceeding to the Second Refinement
(2 of 3)

• The second refinement of the preceding pseudocode
statement is then
Prompt the user to enter the first grade
Input the first grade (possibly the sentinel)
While the user has not yet entered the sentinel
Add this grade into the running total
Add one to the grade counter
Prompt the user to enter the next grade
Input the next grade (possibly the sentinel)
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9.2 Proceeding to the Second Refinement
(3 of 3)
• The pseudocode statement
Calculate and print the total of all student grades and the
class average
• can be refined as follows:
If the counter is not equal to zero
Set the average to the total divided by the counter
Print the average
else
Print “No grades were entered”
• Test for the possibility of division by zero
– Normally a fatal logic error that, if undetected, would cause
the program to fail (often called “crashing”).
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Class-Averaging Pseudocode Algorithm with
Sentinel-Controlled Iteration

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Solving the Class-Average Problem Using
Sentinel-Controlled Iteration (1 of 4)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Solving the Class-Average Problem Using
Sentinel-Controlled Iteration (2 of 4)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Solving the Class-Average Problem Using
Sentinel-Controlled Iteration (3 of 4)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Solving the Class-Average Problem Using
Sentinel-Controlled Iteration (4 of 4)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9.4 Converting between Fundamental
Types Explicitly and Implicitly
• To perform a floating-point calculation with integers,
create temporary floating-point values.
• static_cast operator accomplishes this task.
• The cast operator static_cast<double>(total)
creates a temporary floating-point copy of its
operand in parentheses.
– Known as explicit conversion.
– The value stored in total is still an integer.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9.5 Formatting Floating-Point
Numbers (1 of 3)
• The call to setprecision (with an argument of 2) indicates
that double values should be printed with two digits of
precision to the right of the decimal point (e.g., 92.37).
– Parameterized stream manipulator (argument in
parentheses).
– Programs that use these must include the header
<iomanip>.
• endl is a nonparameterized stream manipulator and
does not require the <iomanip> header file.
• If the precision is not specified, floating-point values are
normally output with six digits of precision.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9.5 Formatting Floating-Point
Numbers (2 of 3)
• Stream manipulator fixed indicates that floatingpoint values should be output in fixed-point format,
as opposed to scientific notation.
• Fixed-point formatting is used to force a floating-point
number to display a specific number of digits.
• Specifying fixed-point formatting also forces the
decimal point and trailing zeros to print, even if the
value is a whole number amount, such as 88.00.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.9.5 Formatting Floating-Point
Numbers (3 of 3)
• When the stream manipulators fixed and
setprecision are used in a program, the printed value
is rounded to the number of decimal positions indicated
by the value passed to setprecision (e.g., the value
2), although the value in memory re-mains unaltered.
• It’s also possible to force a decimal point to appear by
using stream manipulator showpoint.
– If showpoint is specified without fixed, then
trailing zeros will not print.
– Both can be found in header <iostream>.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.10.6 Unsigned Integers and User
Input (1 of 2)
• Figure 4.10 declared the variable gradeCounter as an unsigned
int because it can assume only the values from 1 through 11 (11
terminates the loop), which are all non-negative values.
• Could have also declared as unsigned int the variables
grade, total and average. Grades are normally values from
0 to 100, so the total and average should each be greater than
or equal to 0.
• We declared those variables as ints because we can’t control
what the user actually enters—the user could enter negative
values.
• Worse yet, the user could enter a value that’s not even a number.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.10.6 Unsigned Integers and User
Input (2 of 2)
• Sometimes sentinel-controlled loops use
intentionally invalid values to terminate a loop.
• We terminate the loop when the user enters the
sentinel -1 (an invalid grade), so it would be improper
to declare variable grade as an unsigned int.
• As you’ll see, the end-of-file (EOF) indicator is also
normally implemented internally in the compiler as a
negative number.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11 Formulating Algorithms: Nested
Control Statements
• For the next example, we once again formulate an
algorithm by using pseudocode and top-down,
stepwise refinement, and write a corresponding C++
program.
• In this case study, we examine the only other
structured way control statements can be connected
—namely, by nesting one control statement within
another.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.1 Problem Statement (1 of 3)
• Consider the following problem statement:
– A college offers a course that prepares students
for the state licensing exam for real es-tate
brokers. Last year, ten of the students who
completed this course took the exam. The college
wants to know how well its students did on the
exam. You’ve been asked to write a program to
summarize the results. You’ve been given a list of
these 10 students. Next to each name is written a
1 if the student passed the exam or a 2 if the
student failed.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.1 Problem Statement (2 of 3)
– Your program should analyze the results of the exam as
follows:
1. Input each test result (i.e., a 1 or a 2). Display the
prompting message “Enter result” on the screen
each time the program requests another test result.
2. Count the number of test results of each type.
3. Display a summary of the test results indicating the
number of students who passed and the number
who failed.
4. If more than eight students passed the exam, print
“Bonus to instructor!”

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.1 Problem Statement (3 of 3)
• After reading the problem statement carefully, we make the
following observations:
– Must process test results for 10 students. A countercontrolled loop can be used because the number of test
results is known in advance.
– Each test result is either a 1 or a 2. Each time the program
reads a test result, the program must determine whether the
number is a 1 or a 2. For simplicity, we test only for a 1 in our
algorithm. If the number is not a 1, we assume that it’s a 2.
– Two counters keep track of the exam results—one to count
the number of students who passed and one to count the
number of students who failed.
– After the program has processed all the results, it must
decide whether more than eight students passed the exam.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.2 Top-Down Stepwise Refinement:
Pseudocode Representation of the Top
• Pseudocode representation of the top:
Analyze exam results and decide whether
tuition should be raised

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.3 Top-Down Stepwise Refinement:
First Refinement
• First refinement
Initialize variables
Input the 10 exam results, and count passes and
failures
Print a summary of the exam results and decide
whether a bonus should be paid
• Further refinement is necessary.
• Counters are needed to record the passes and
failures, a counter will be used to control the looping
process and a variable is needed to store the user
input.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.4 Top-Down Stepwise Refinement:
Second Refinement (1 of 4)
• The pseudocode statement
Initialize variables
• can be refined as follows:
Initialize passes to zero
Initialize failures to zero
Initialize student counter to one

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.4 Top-Down Stepwise Refinement:
Second Refinement (2 of 4)
• The following pseudocode statement requires a loop
that successively inputs the result of each exam
Input the 10 exam results, and count passes and
failures
• 10 exam results, so counter-controlled looping is
appropriate.
• Nested inside the loop, an if…else statement will
determine whether each exam result is a pass or a
failure and will increment the appropriate counter.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.4 Top-Down Stepwise Refinement:
Second Refinement (3 of 4)
• The refinement of the preceding pseudocode
statement is then
While student counter is less than or equal to 10
Prompt the user to enter the next exam result
Input the next exam result
If the student passed
Add one to passes
Else
Add one to failures
Add one to student counter
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.4 Top-Down Stepwise Refinement:
Second Refinement (4 of 4)
• The pseudocode statement
Print a summary of the exam results and decide
whether bonus should be paid
• can be refined as follows:
Print the number of passes
Print the number of failures
If more than eight students passed
Print “Bonus to instructor!”
• The complete second refinement appears in Figure
4.13.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.13 Pseudocode for ExaminationResults Problem

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.6 Program That Implements the
Pseudocode Algoritm (1 of 2)
• The program that implements the pseudocode
algorithm and two sample executions are shown in
Figure 4.14.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Error-Prevention Tip 4.4
Initializing local variables when they’re declared helps you
avoid any compilation warnings that might arise from
attempts to use uninitialized variables and helps you avoid
logic errors from using uninitialized variables.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.14 Analysis of Examination Results
Using Nested Control Statements (1 of 3)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.14 Analysis of Examination Results
Using Nested Control Statements (2 of 3)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.14 Analysis of Examination Results
Using Nested Control Statements (3 of 3)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.6 Program That Implements the
Pseudocode Algoritm (2 of 2)
• The if…else statement for processing each result is
nested in the while statement.
• The if statement after the loop determines whether
more than eight students passed the exam and, if so,
outputs the message "Bonus to instructor!".

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.7 Preventing Narrowing Conversions
with List Initialization (1 of 3)
• Consider from Figure 4.14

• Can also write as

• or

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.7 Preventing Narrowing Conversions
with List Initialization (2 of 3)
• For fundamental-type variables, list-initialization
syntax also prevents so-called narrowing
conversions that could result in data loss.
• For example, previously you could write
• which attempts to assign the double value 12.7 to
the int variable x.
• A double value is converted to an int, by truncating
the floating-point part (.7), which results in a loss of
information—a narrowing conversion.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.11.7 Preventing Narrowing Conversions
with List Initialization (3 of 3)
• The actual value assigned to x is 12.
• Many compilers generate a warning for this
statement, but still allow it to compile.
• However, using list initialization, as in
• or

• yields a compilation error.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.12 Compund Assignment Operators
• The compound assignment operators abbreviate assignment
expressions.
• The += operator adds the value of the expression on the right of the
operator to the value of the variable on the left of the operator and
stores the result in the variable on the left of the operator.
• Any statement of the form
– variable = variable operator expression;
• in which the same variable appears on both sides of+,
-, *,assignment
/, or %
the
operator
operator
onein
ofthe
thetext),
binary
operators
(or othersand
we’ll
discuss is
later
can
be written in the form
– variable operator= expression;
• Thus the assignment c += 3 adds 3 to c.
• Figure 4.15 shows the arithmetic assignment operators, sample
expressions using these operators and explanations.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.15 Arithmetic Compound
Assignment Operators
Assume: int c = 3, d = 5, e = 4, f = 6, g = 12;

Assignment
operator

Sample
expression

Explanation

Assigns

+=

Plus equals

c +=7

c = c +7

c equals c plus 7

10 to c

Minus equals

d minus equals 4

d=d- 4

d equals d minus 4

1 to d

e=e * 5

e *=5
Forward slash equals f forward slash equals f equals f forward slash
/=
3
f3 = f / 3
f / =3

e equals e asterisk 5

20 to e

Percent sign equals

3 to g

 

Asterisk equals

%=

c plus equals 7

d-=4

e asterisk equals 5

g percent equals 9

g%=9

g equals g percent 9

g = g %9

2 to f

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.13 Increment and Decrement
Operators (1 of 3)
• C++ also provides two unary operators for adding 1 to
or subtracting 1 from the value of a numeric variable.
• These are the unary increment
++, and the
operator,
Unary decrement operator,
, which are
summarized
in Figure 4.16.

--

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.16 Increment and decrement
operators
Operator

Operator
name

Sample
expression

Explanation

Plus plus

++

Prefix
increment

+Plus
+ aplus a

Increment a by 1, then use the
new value of a in the expression
in which a resides.

++

Plus plus

postfix
increment

a++

a plus plus

Use the current value of a in the
expression in which a resides,
then increment a by 1.

Minus minus

Prefix
decrement

Plus plus b

Decrement b by 1, then use the
new value of b in the expression
in which b resides.

Minus minus

postfix
decrement

b plus plus

Use the current value of b in the
expression in which b resides,
then decrement b by 1.

---

++b

b++

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Good Programming Practice 4.4
Unlike binary operators, the unary increment and
decrement operators as a matter of style should be placed
next to their operands, with no intervening spaces.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.17 Prefix Increment and Postfix
Increment Operators (1 of 2)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.17 Prefix Increment and Postfix
Increment Operators (2 of 2)

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.13 Increment and Decrement
Operators (2 of 3)
• When
increment + +  or decrement - - a
you
variable in a statement by itself, the preincrement and
postincrement forms have the same effect, and the
predecrement and postdecrement forms have the
same effect.

• In the context of a larger expression preincrementing
a variable and postincrementing a variable have
different effects (and similarly for predecrementing
and post-decrementing).

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Common Programming Error 4.4
Attempting to use the increment or decrement operator on
an expression other than one to which a value can be
assigned is a syntax error. For example, writing + + (x + 1)
is a syntax error, because (x + 1) is not a variable.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.13 Increment and Decrement
Operators (3 of 3)
• Figure 4.18 shows the precedence and associativity of
the operators introduced to this point.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Good Programming Practice 4.5
Refer to the operator precedence and associativity chart
(Appendix A) when writing expressions containing many
operators. Confirm that the operators in the expression are
performed in the order you expect. If you’re uncertain about
the order of evaluation in a complex expression, break the
expression into smaller statements or use parentheses to
force the order of evaluation, exactly as you’d do in an
algebraic expression. Be sure to observe that some
operators such as assignment (=) associate right to left
rather than left to right.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Figure 4.18 Operator Precedence for the
Operators Encountered So Far in the Text
Operators

Associativity

Type

colon colon left parenthesis right parenthesis

:: ()

left to right [See Figure 2.10’s
caution regarding grouping
parentheses.]

primary

plus plus minus minus static underscore cast left
angle bracket type right angle bracket left
parenthesis right parenthesis

left to right

postfix

plus plus minus minus plus minus

right to left

unary (prefix)

asterisk slash percent sign

left to right

multiplicative

plus minus

left to right

additive

left angle bracket left angle bracket right angle
bracket right angle bracket

left to right

insertion/extraction

left angle bracket left angle bracket equals equals
right angle bracket right angle bracket equals

left to right

relational

equals equals exclamation point equals

left to right

equality

right to left

conditional

right to left

assignment

+ + - - static_cast < type > ()

++ -- + -

* / %

+-

<< >>

< <= > >=

== ! =

question mark colon

?:

= += -= *= / = %=

equals plus equals minus equals asterisk equals
slash equals percent sign equals

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

4.14 Fundamental Types Are Not Portable
• The table in Appendix C lists C++’s fundamental types.
• C++ requires all variables to have a type.
• In C and C++, programmers frequently have to write
separate versions of programs to support different
computer platforms, because the fundamental types
are not guaranteed to be identical from computer to
computer.
– An int on one machine might be represented by 16
bits (2 bytes) of memory, on a second machine by
32 bits (4 bytes), and on another machine by 64
bits (8 bytes).
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Portability Tip 4.2
C++’s fundamental types are not portable across all
computer platforms that support C++.

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

Copyright

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved

