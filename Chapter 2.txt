SENG 1110 – Fall 2025
Chapter 2: Intro to C++ Programming
Dr. Zeinab Teimoori
Department of Engineering
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
Learning Objectives
• Write simple C++ applications.
• Use input and output statements.
• Use fundamental data types.
• Understand basic memory concepts.
• Use arithmetic operators.
• Understand the precedence of arithmetic operators.
• Write decision-making statements.
• Use relational and equality operators.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.1 Comments
// fig02_01.cpp 
// Text-printing program. // is called a single-line comment
/* fig02_01.cpp: Text-printing program. */
/* fig02_01.cpp 
Text-printing program. */
multiline comments
#include <iostream> // enables program to output data to the screen 
inline comments
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.2 Identifiers
• A variable name is any valid identifier that is not a 
keyword
• Consists of letters, digits and underscores (_)
• Must not begin with a digit
• C++ is case sensitive
– a1 and A1 are different identifiers
• Avoid identifiers that begin with underscores and double 
underscores
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.2 Variable Declarations and Braced 
Initialization (1 of 7)
• Declarations introduce identifiers into programs.
• The identifiers number1, number2 and sum are the names 
of variables.
• A variable is a location in the computer’s memory where 
a value can be stored for use by a program.
• Data of type int, means variables will hold integers
(whole numbers such as 7, –11, 0 and 31914).
int number1 = 0;
int number2 = 0;
int sum = 0;
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.2 Variable Declarations and Braced 
Initialization (2 of 7)
Memory Location Showing the Name 
and Value of Variable number1
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.2 Variable Declarations and Braced 
Initialization (3 of 7)
Memory Locations After Storing Values in 
the Variables for number1 and number2
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.2 Variable Declarations and Braced 
Initialization (4 of 7)
Memory Locations After Calculating and 
Storing the Sum of number1 and number2
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.2 Variable Declarations and Braced 
Initialization (5 of 7)
• int number1{0}; // first integer to add (initialized to 0) 
• int number2{0}; // second integer to add (initialized to 0) 
• int sum{0}; // sum of number1 and number2 (initialized to 0)
• initialize each variable to 0 by placing a value in braces 
({ and }) immediately following the variable’s name
– Known as list initialization
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.2 Variable Declarations and Braced 
Initialization (6 of 7)
• All variables must be declared with a name and a data type before 
they can be used in a program.
• int number1{0}, number2{0}, sum{0}; 
• If more than one name is declared in a declaration, the names are 
separated by commas (,); 
• This is referred to as a comma-separated list.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.2 Variable Declarations and Braced 
Initialization (7 of 7)
• Types such as int, double and char are called fundamental types.
• Data type double is for specifying real numbers, and data type char
for specifying character data.
• Real numbers are numbers with decimal points, such as 3.4, 0.0 and 
–11.19.
• A char variable may hold only a single lowercase letter, a single 
uppercase letter, a single digit or a single special character (e.g., $ or 
*).
• Fundamental-type names are keywords and therefore must appear 
in all lowercase letters.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
Checkpoint
(True/False): Together, blank lines, spaces and tabs are known as 
whitespace and are usually ignored by the compiler.
(True/False) The following statement displays the string "Hello" then 
positions the output cursor on the next line.
std::cout << "Hello"; 
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.3 Arithmetic Operators (1 of 4)
Operation Arithmetic operator C++ expression
Addition + f + 7
Subtraction - p - c
Multiplication * b * m
Division / x / y
Remainder % r % s
• binary operators because each has two operands.
• Integer division in which the numerator and the denominator 
are integers yields an integer quotient
17/5 evaluates to 3
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.3 Arithmetic Operators (2 of 4)
• Parentheses are used in C++ expressions in the same 
manner as in algebraic expressions.
• For example, to multiply a times the quantity b + c we 
write
– a * (b+c)
• rules of operator precedence
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.3 Arithmetic Operators (3 of 4)
Operator(s) Operation(s) Order of evaluation (precedence)
( ) Parentheses Evaluated first. For nested parentheses, the expression 
in the innermost pair evaluates first.
*
/
%
Multiplication
Division
Remainder
Evaluated second. If there are several, they’re evaluated 
left to right.
+
−
Addition
Subtraction
Evaluated last. If there are several, they’re evaluated left 
to right.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.3 Arithmetic Operators (4 of 4)
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
Checkpoint
(Fill-in) Every variable has a name, a type and a ________.
(True/False) Storing a value in a variable replaces the 
previous value in the corresponding memory location.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.4 Obtaining Value from the User (1 of 3)
• A prompt directs the user to take a specific action.
• A cin statement uses the input stream object cin (of 
namespace std) and the stream extraction operator, 
>>, to obtain a value from the keyboard.
• Using the stream extraction operator with std::cin 
takes character input from the standard input stream, 
which is usually the keyboard.
std::cin >> number1; // read first integer 
from user into number1
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.4 Obtaining Value from the User (2 of 3)
• When the computer executes an input statement, it waits for the user to 
enter a value for variable number1.
• The user responds by typing the number (as characters) then pressing the 
Enter key (sometimes called the Return key) to send the characters to the 
computer.
• The computer converts the character representation of the number to an 
integer and assigns (i.e., copies) this number (or value) to the variable 
number1.
• Any subsequent references to number1 in this program will use this same
value.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.4 Obtaining Value from the User (3 of 3)
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.5 Decision Making: Equality and 
Relational Operators (1 of 7)
• The if statement allows a program to take alternative action based 
on whether a condition is true or false.
– If the condition is true, the statement in the body of the if 
statement is executed.
– If the condition is false, the body statement is not executed.
• Conditions in if statements can be formed by using the equality 
operators and relational operators.
• The relational operators all have the same level of precedence and 
associate left to right.
• The equality operators both have the same level of precedence, 
which is lower than that of the relational operators, and associate left 
to right.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.5 Decision Making: Equality and 
Relational Operators (2 of 7)
Relational operators
Algebraic relational
or equality operator
C++ relational or
equality operator
Sample C++
condition
Meaning of C++ condition
Right angle bracket Right angle bracket X right angle bracket Y x is greater than y
Left angle bracket Left angle bracket X left angle bracket Y x is less than y
Greater than or equal to Right angle bracket equals X right angle bracket 
equals Y
x is greater than or equal to y
Less than or equal to Left angle bracket equals X left angle bracket 
equals Y
x is less than or equal to y
 > x > y  < x < y    x >= y  <= x <= y
Equality operators
Algebraic relational
or equality operator
C++ relational or
equality operator
Sample C++
condition
Meaning of C++ condition
Equals Equals equals X equals equals Y x is equal to y
not equal to Exclamation point equals X Exclamation point 
equals Y
x is not equal to y
  x y    !  x ! y 
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.5 Decision Making: Equality and 
Relational Operators (3 of 7)
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.5 Decision Making: Equality and 
Relational Operators (4 of 7)
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.5 Decision Making: Equality and 
Relational Operators (5 of 7)
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.5 Decision Making: Equality and 
Relational Operators (6 of 7)
• Each if statement has a single statement in its body and 
each body statement is indented.
• Each if statement’s body is enclosed in a pair of braces, 
{ }, creating what’s called a compound statement or a 
block that may contain multiple statements.
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
2.5 Decision Making: Equality and 
Relational Operators (7 of 7)
Operators Associativity Type
Left parenthesis right parenthesis grouping grouping parentheses
Asterisk Forward slash Percent left to right multiplicative
Plus minus left to right additive
Left angle bracket Left angle bracket right 
angle bracket right angle bracket left to right stream insertion/extraction
Left angle bracket Left angle bracket equals 
right angle bracket Right angle bracket equals left to right relational
Equals equals Exclamation point equals left to right equality
Equals right to left assignment
()*
/ %
+ - << >>
< <= > >= == ! 

Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
Checkpoint
(Code) Assume number1 is 12 and number2 is 23. What 
does the following code print?
if (number1 > number2) { 
cout << number1 << " > " << number2 << "\n"; 
} 
Copyright © 2017, 2014, 2012 Pearson Education, Inc. All Rights Reserved
Checkpoint
(Code) Assume number1 is 23 and number2 is 23. What 
does the following code print? 
if (number1 != number2); { 
cout << number1 << " != " << number2 << "\n";